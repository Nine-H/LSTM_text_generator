#! /usr/bin/env python3

import numpy as np

from keras.layers import Dense, Activation
from keras.layers.recurrent import SimpleRNN
from keras.models import Sequential
#from keras.utils.visualize_util import plot

#import comments, and format them into a single string.
input_file=open("input.txt", 'r')
lines=[]
for line in input_file:
    line=lines.append(line)
input_file.close()
text=" ".join(lines)

#this RNN will operate at the character level

#generate lookup tables
chars=set([c for c in text])
nb_chars=len(chars)
character_to_index=dict((c,i) for i, c in enumerate(chars))
index_to_character=dict((i,c) for i, c in enumerate(chars))

#iterate over text to generate spans
SEQLEN=10
STEP=1

input_chars=[]
label_chars=[]
for i in range(0, len(text) - SEQLEN, STEP):
    input_chars.append(text[i:i+SEQLEN])
    label_chars.append(text[i+SEQLEN])

#vectorise input and label texts

x=np.zeros((len(input_chars), SEQLEN, nb_chars), dtype=np.bool)
y=np.zeros((len(input_chars), nb_chars), dtype=np.bool)
for i, input_char in enumerate(input_chars):
    for j, ch in enumerate(input_char):
        x[i, j, character_to_index[ch]]=1
    y[i, character_to_index[label_chars[i]]]=1

#build our model
HIDDEN_SIZE=128
BATCH_SIZE=128
NUM_ITERATIONS=500
NUM_EPOCHS_PER_ITERATION=1
NUM_PREDS_PER_EPOCH=100

model = Sequential()
model.add(SimpleRNN(HIDDEN_SIZE, return_sequences=False, input_shape=(SEQLEN,nb_chars),unroll=True))
model.add(Dense(nb_chars))
model.add(Activation("softmax"))

model.compile(loss="categorical_crossentropy",optimizer="rmsprop")

for iteration in range(NUM_ITERATIONS):
    print("Iteration #: %d"%(iteration))
    model.fit(x, y, batch_size=BATCH_SIZE, epochs=NUM_EPOCHS_PER_ITERATION)
    test_idx=np.random.randint(len(input_chars))
    test_chars=input_chars[test_idx]
    print("Generating from seed: %s"%(test_chars))
    print(test_chars, end="")
    for i in range (NUM_PREDS_PER_EPOCH):
        xtest=np.zeros((1, SEQLEN, nb_chars))
        for i, ch in enumerate(test_chars):
            xtest[0, i, character_to_index[ch]]=1
        pred=model.predict(xtest, verbose=0)[0]
        ypred = index_to_character[np.argmax(pred)]
        print(ypred, end="")
        test_chars=test_chars[1:]+ypred

print()














